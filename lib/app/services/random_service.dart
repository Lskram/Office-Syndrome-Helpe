import 'dart:math';
import '../services/database_service.dart';

class RandomService {
  static final Random _random = Random();

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
  static int selectRandomPainPoint(List<int> selectedPainPoints) {
    if (selectedPainPoints.isEmpty) {
      throw Exception('No pain points selected');
    }

    final randomIndex = _random.nextInt(selectedPainPoints.length);
    return selectedPainPoints[randomIndex];
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô count ‡∏ó‡πà‡∏≤ ‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  /// ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  static List<int> selectRandomTreatments(int painPointId, int count) {
    final allTreatments = DatabaseService.getTreatmentsByPainPoint(painPointId);

    if (allTreatments.isEmpty) {
      throw Exception('No treatments found for pain point $painPointId');
    }

    if (count > allTreatments.length) {
      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      return allTreatments.map((t) => t.id).toList();
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    final treatmentIds = allTreatments.map((t) => t.id).toList();
    treatmentIds.shuffle(_random);

    return treatmentIds.take(count).toList();
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î
  static List<int> selectMixedRandomTreatments(
    List<int> painPointIds,
    int totalCount,
  ) {
    if (painPointIds.isEmpty) {
      throw Exception('No pain points provided');
    }

    final allTreatments = <int>[];

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î
    for (final painPointId in painPointIds) {
      final treatments = DatabaseService.getTreatmentsByPainPoint(painPointId);
      allTreatments.addAll(treatments.map((t) => t.id));
    }

    if (allTreatments.isEmpty) {
      throw Exception('No treatments found for provided pain points');
    }

    // ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    allTreatments.shuffle(_random);
    return allTreatments.take(totalCount).toList();
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
  static List<int> createRandomExerciseSequence(List<int> treatmentIds) {
    final sequence = List<int>.from(treatmentIds);
    sequence.shuffle(_random);
    return sequence;
  }

  /// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  static int selectRandomInterval({
    required int minMinutes,
    required int maxMinutes,
  }) {
    if (minMinutes >= maxMinutes) {
      return minMinutes;
    }

    return minMinutes + _random.nextInt(maxMinutes - minMinutes + 1);
  }

  /// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  static DateTime selectRandomTimeInDay({
    DateTime? baseDate,
    int? minHour,
    int? maxHour,
  }) {
    final date = baseDate ?? DateTime.now();
    final startHour = minHour ?? 9;
    final endHour = maxHour ?? 17;

    final randomHour = startHour + _random.nextInt(endHour - startHour);
    final randomMinute = _random.nextInt(60);

    return DateTime(date.year, date.month, date.day, randomHour, randomMinute);
  }

  /// ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  static String selectRandomNotificationTitle(String painPointName) {
    final titles = [
      "‚è∞ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•: $painPointName",
      "üí™ ‡∏°‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢: $painPointName ‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞",
      "üßò‚Äç‚ôÄÔ∏è ‡∏û‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô ‡∏î‡∏π‡πÅ‡∏•$painPointName",
      "‚ú® ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: $painPointName",
      "üèÉ‚Äç‚ôÇÔ∏è ‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠$painPointName",
    ];

    return titles[_random.nextInt(titles.length)];
  }

  static String selectRandomNotificationBody() {
    final bodies = [
      "‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ó‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢",
      "‡∏°‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞",
      "‡∏ó‡πà‡∏≤‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô",
      "‡πÅ‡∏Ñ‡πà 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πá‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
    ];

    return bodies[_random.nextInt(bodies.length)];
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  static void seedRandom(int seed) {
    // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ
    // ‡πÉ‡∏ô production ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  static List<int> createBalancedTreatmentList(
    List<int> painPointIds,
    int totalTreatments,
  ) {
    if (painPointIds.isEmpty) return [];

    final selectedTreatments = <int>[];
    final treatmentsPerPainPoint = totalTreatments ~/ painPointIds.length;
    final remainder = totalTreatments % painPointIds.length;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
    for (int i = 0; i < painPointIds.length; i++) {
      final painPointId = painPointIds[i];
      final countForThisPainPoint =
          treatmentsPerPainPoint + (i < remainder ? 1 : 0);

      final treatments = selectRandomTreatments(
        painPointId,
        countForThisPainPoint,
      );
      selectedTreatments.addAll(treatments);
    }

    // ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    selectedTreatments.shuffle(_random);
    return selectedTreatments;
  }

  /// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ
  static List<int> selectTreatmentsByDuration(
    int painPointId,
    int targetDurationSeconds,
  ) {
    final allTreatments = DatabaseService.getTreatmentsByPainPoint(painPointId);
    if (allTreatments.isEmpty) return [];

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    allTreatments.sort(
      (a, b) => a.durationSeconds.compareTo(b.durationSeconds),
    );

    final selectedTreatments = <int>[];
    int totalDuration = 0;

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    for (final treatment in allTreatments) {
      if (totalDuration + treatment.durationSeconds <= targetDurationSeconds) {
        selectedTreatments.add(treatment.id);
        totalDuration += treatment.durationSeconds;
      }

      if (totalDuration >= targetDurationSeconds * 0.8) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 80% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
        break;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡πà‡∏≤‡πÉ‡∏î‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    if (selectedTreatments.isEmpty && allTreatments.isNotEmpty) {
      selectedTreatments.add(allTreatments.first.id);
    }

    return selectedTreatments;
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
  static Map<int, List<int>> createWeeklyExercisePlan(
    List<int> painPointIds,
    List<int> workingDays,
  ) {
    final weeklyPlan = <int, List<int>>{};

    for (final day in workingDays) {
      // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏ß‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
      final dailyPainPoint = selectRandomPainPoint(painPointIds);
      final dailyTreatments = selectRandomTreatments(dailyPainPoint, 2);
      weeklyPlan[day] = dailyTreatments;
    }

    return weeklyPlan;
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static bool isSelectionDiverseEnough(
    List<int> recentSelections,
    int newSelection, {
    int maxRepeatCount = 3,
  }) {
    final recentCount = recentSelections
        .where((selection) => selection == newSelection)
        .length;

    return recentCount < maxRepeatCount;
  }

  /// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏ã‡∏≤‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  static int selectWithDiversityCheck(
    List<int> options,
    List<int> recentSelections, {
    int maxRepeatCount = 2,
  }) {
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    final diverseOptions = options
        .where(
          (option) => isSelectionDiverseEnough(
            recentSelections,
            option,
            maxRepeatCount: maxRepeatCount,
          ),
        )
        .toList();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    final finalOptions = diverseOptions.isNotEmpty ? diverseOptions : options;

    return finalOptions[_random.nextInt(finalOptions.length)];
  }
}
